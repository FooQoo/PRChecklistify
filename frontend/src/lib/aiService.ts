import { generateText, streamText, Output } from 'ai';
import { z } from 'zod';
import type { PRData, PRFile, Checklist } from '../types';
import { createModelClient } from './modelClient';

// --- Schemas for Checklist ---

const ChecklistItemStatusSchema = z
  .union([z.literal('OK'), z.literal('NG'), z.literal('PENDING')])
  .describe('チェックリストアイテムの状態（OK, NG, PENDING のいずれか）');

const ChecklistItemSchema = z
  .object({
    id: z.string().describe('チェックリストアイテムの一意なID'),
    description: z.string().describe('チェックリストアイテムの説明文'),
    status: ChecklistItemStatusSchema,
  })
  .describe('チェックリストアイテム（ID・説明・状態）');

const ChecklistSchema = z
  .object({
    filename: z.string().describe('対象ファイル名'),
    explanation: z.string().describe('ファイル全体に対する説明'),
    checklistItems: z.array(ChecklistItemSchema).describe('このファイルに対するチェックリストアイテムの配列'),
  })
  .describe('ファイル単位のチェックリスト（説明＋アイテム配列）');

// --- Prompt Builders ---

export function buildChecklistPrompt(prData: PRData, file: PRFile, language: string): string {
  const { title, body } = prData;

  return `
File: ${file.filename} (${file.status})
Changes: +${file.additions} -${file.deletions}
${file.patch ? `Patch:\n${file.patch}` : 'No patch available'}

Analyze this pull request file and provide your response in ${language}.

For each changed file, create a checklist of specific items to review, focusing on:
   * Background and problem being solved
   * Code correctness
   * Best practices
   * Potential bugs
   * Performance concerns
   * Security implications
   * Code is well-formatted and consistent with project style

### Additional instructions for file analysis:

* Max checklist items per file: 3

* For **core logic files, UI components, specifications, and tests**, generate detailed checklist items with:
  * description: e.g. "Check that..." 
  * status: "PENDING".
* For **mock data files, slice files, and type definition files**, generate only one checklist item with:
  * description: e.g. "Low risk - review not required."
  * status: "OK"
* For **dist and other build artifacts**, generate only one checklist item with:
  * description: e.g. "Build artifact - review not required."
  * status: "OK"
* Provide a meaningful explanation for every file, even for mocks and dist files, summarizing why they changed and their role in the PR.

PR Title: ${title}
PR Description: ${body}

Format your response as a JSON object with the following structure:
{
  "filename": "path/to/file.ts",
  "explanation": "Update the checklist for this file generated by OpenAI",
  "checklistItems": [
    {
      "id": "item_0",
      "description": "Check that...",
      "status": "PENDING"
    },
    ...more items
  ]
}

Important: All text content and checklist inside the JSON must be in ${language}. Keep the JSON structure and field names in English.
`;
}

// --- Service Functions ---

/**
 * Generates a checklist for a single file.
 */
export async function generateChecklist(prData: PRData, file: PRFile, language: string): Promise<Checklist> {
  const model = createModelClient();
  const prompt = buildChecklistPrompt(prData, file, language);

  const { experimental_output } = await generateText({
    model,
    experimental_output: Output.object({
      schema: ChecklistSchema,
    }),
    messages: [
      {
        role: 'system',
        content:
          'You are a senior software developer conducting a thorough code review. You provide detailed, actionable feedback in JSON format as requested.',
      },
      {
        role: 'user',
        content: prompt,
      },
    ],
    temperature: 0.3,
  });

  return experimental_output as Checklist;
}

/**
 * Generates a summary for a PR and streams the response.
 */
export async function generateSummaryStream(prData: PRData, language: string) {
  const model = createModelClient();
  const diff = prData.files.map(file => `--- ${file.filename} ---\n${file.patch || ''}`).join('\n\n');
  const mergeStatus = prData.merged_at ? 'merged' : prData.closed_at ? 'closed' : 'open';

  const systemPrompt = `This is a pull request summary generation task. You will generate a concise summary of the pull request content in ${language}.\n\nPR Author: ${prData.user?.login || 'Unknown'}\nPR Title: ${prData.title}\nPR Description: ${prData.body}\nPR diff: ${diff}\nPR Merge Status: ${mergeStatus}`;
  const userPrompt = `Summarize the content of this pull request concisely from the following five perspectives: Background & Problem, Solution & Implementation.`;

  return streamText({
    model,
    messages: [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userPrompt },
    ],
    temperature: 0.3,
  });
}
