// Common interface for LLM clients (OpenAI, Gemini, etc.)
import type { Checklist, PRData, PRFile } from '@src/types';

// ModelClientType for selecting the appropriate LLM service
export enum ModelClientType {
  OpenAI = 'openai',
  Gemini = 'gemini',
}

// Common interface for all LLM clients
export interface ModelClient {
  analyzePR(prData: PRData, file: PRFile, languageOverride?: string): Promise<Checklist>;
  streamChatCompletion(
    messages: { role: 'user' | 'system' | 'assistant'; content: string }[],
    onToken: (token: string) => void,
    options?: { signal?: AbortSignal },
  ): Promise<void>;
}

// Factory function to create appropriate client
import { createOpenAIClient } from './openai';
import { createGeminiClient } from './gemini';
import type { Language } from '@extension/storage';
import { getLanguageLabel } from '@extension/storage';

// Storage for model client type preference
export const modelClientTypeStorage = {
  get: async (): Promise<ModelClientType | null> => {
    try {
      const result = await chrome.storage.local.get('modelClientType');
      return (result.modelClientType as ModelClientType) || null;
    } catch (error) {
      console.error('Error getting model client type preference:', error);
      return null;
    }
  },

  set: async (clientType: ModelClientType): Promise<void> => {
    try {
      await chrome.storage.local.set({ modelClientType: clientType });
    } catch (error) {
      console.error('Error setting model client type preference:', error);
      throw error;
    }
  },

  clear: async (): Promise<void> => {
    try {
      await chrome.storage.local.remove('modelClientType');
    } catch (error) {
      console.error('Error clearing model client type preference:', error);
      throw error;
    }
  },
};

export async function createModelClient(): Promise<ModelClient | null> {
  // Get the preferred client type from storage, default to OpenAI if not set
  const clientType = (await modelClientTypeStorage.get()) || ModelClientType.OpenAI;

  switch (clientType) {
    case ModelClientType.OpenAI:
      return await createOpenAIClient();
    case ModelClientType.Gemini:
      return await createGeminiClient();
    default:
      console.error(`Unknown model client type: ${clientType}`);
      return null;
  }
}

// Build the prompt for PR analysis (moved from OpenAIClient)
export function buildPRAnalysisPrompt(prData: PRData, file: PRFile, language: Language): string {
  const { title, body } = prData;

  // return `\nAnalyze this pull request and provide your response in Japanese. Include:\nDo not omit or summarize any file. Include all changed files in the output.\n\n1. (Must Require) A summary of the PR, including:\n   * Background\n   * Problem being solved\n   * Solution approach\n   * Implementation details\n\n2. (Must Require) For each changed file, create an explanation of the changes, focusing on:\n   * Why the changes were made\n   * How they relate to the overall PR\n   * Any specific areas of concern or interest\n   * Any additional context that would help in the review\n\n3. (Optional) For each changed file, create a checklist of specific items to review, focusing on:\n   * Background and problem being solved\n   * Code correctness\n   * Best practices\n   * Potential bugs\n   * Performance concerns\n   * Security implications\n   * Code is well-formatted and consistent with project style\n\n### Additional instructions for file analysis:\n\n* **All changed files must be included** in the fileAnalysis output. Do not omit any file.\n* For **core logic files, UI components, specifications, and tests**, generate detailed checklist items with:\n  * description: e.g. "Check that..." \n  * status: "PENDING".\n* For **mock data files, slice files, and type definition files**, generate only one checklist item with:\n\n  * description: e.g. "Low risk - review not required."\n  * status: "OK"\n* For **dist and other build artifacts**, generate only one checklist item with:\n\n  * description: e.g. "Build artifact - review not required."\n  * status: "OK"\n* Provide a meaningful explanation for every file, even for mocks and dist files, summarizing why they changed and their role in the PR.\n\nPR Title: ${title}\nPR Description: ${body}\n\nChanged Files:\n${fileChanges}\n\nFormat your response as a JSON object with the following structure:\n{\n  "summary": "summary of the PR in ${languageLabel}",\n  "fileAnalysis": [\n    {\n      "id": "file-1",\n      "filename": "path/to/file.ts",\n      "explanation": "Update the checklist for this file generated by OpenAI",\n      "checklistItems": [\n        {\n          "id": "item_0",\n          "description": "Check that...",\n          "status": "PENDING"\n        },\n        ...more items\n      ],\n      "order": 1 // review order\n    },\n    ...more files\n  ]\n}\n\nImportant: All text content and checklist inside the JSON must be in ${languageLabel}. Keep the JSON structure and field names in English.\n`;
  return `
File: ${file.filename} (${file.status})
Changes: +${file.additions} -${file.deletions}
${file.patch ? `Patch:\n${file.patch}` : 'No patch available'}

Analyze this pull request file and provide your response in ${getLanguageLabel(language)}.

For each changed file, create a checklist of specific items to review, focusing on:
   * Background and problem being solved
   * Code correctness
   * Best practices
   * Potential bugs
   * Performance concerns
   * Security implications
   * Code is well-formatted and consistent with project style

### Additional instructions for file analysis:

* Max checklist items per file: 5

* For **core logic files, UI components, specifications, and tests**, generate detailed checklist items with:
  * description: e.g. "Check that..." 
  * status: "PENDING".
* For **mock data files, slice files, and type definition files**, generate only one checklist item with:

  * description: e.g. "Low risk - review not required."
  * status: "OK"
* For **dist and other build artifacts**, generate only one checklist item with:

  * description: e.g. "Build artifact - review not required."
  * status: "OK"
* Provide a meaningful explanation for every file, even for mocks and dist files, summarizing why they changed and their role in the PR.

PR Title: ${title}
PR Description: ${body}

Format your response as a JSON object with the following structure:
{
  "filename": "path/to/file.ts",
  "explanation": "Update the checklist for this file generated by OpenAI",
  "checklistItems": [
    {
      "id": "item_0",
      "description": "Check that...",
      "status": "PENDING"
    },
    ...more items
  ]
}

Important: All text content and checklist inside the JSON must be in ${getLanguageLabel(language)}. Keep the JSON structure and field names in English.
`;
}
